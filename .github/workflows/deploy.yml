name: CI/CD Pipeline

on:
  push:
    branches: [ "master", "dev" ]

jobs:
  # 1. Build and Push Docker Image
  build-and-push:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }}

  # 2. Security Scan (reuses the built image)
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Trivy Scan
        uses: aquasecurity/trivy-action@0.12.0
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true

  # 3. Deploy to GKE
  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Docker for GCP
        run: gcloud auth configure-docker

      - name: Get GKE Credentials
        run: gcloud container clusters get-credentials my-gke-cluster --region ${{ secrets.GCP_REGION }}

      - name: Deploy to GKE
        run: |
          kubectl set image deployment/my-app my-app=${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }}
          kubectl rollout status deployment/my-app






















# name: build-and-deploy

# on:
#   push:
#     branches: [ "master" ]

# jobs:
#   build-deploy:
#     runs-on: ubuntu-latest

#     permissions:
#       id-token: write
#       contents: read

#     env:
#       REGION: europe-west1
#       REPO_ID: text-analyzer
#       SERVICE_NAME: text-analyzer-api
#       TF_WORKING_DIR: terraform

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: Set up gcloud auth (WIF)
#         uses: google-github-actions/auth@v2
#         with:
#           workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
#           service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

#       - name: Set up gcloud SDK
#         uses: google-github-actions/setup-gcloud@v2
#         with:
#           version: ">= 472.0.0"

#       - name: Configure Artifact Registry Docker auth
#         run: gcloud auth configure-docker $REGION-docker.pkg.dev --quiet

#       - name: Build image
#         run: |
#           PROJECT_ID="$(gcloud config get-value project)"
#           IMAGE_URI="${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO_ID}/text-analyzer:${GITHUB_SHA}"
#           echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
#           docker build -t "$IMAGE_URI" .

#       - name: Push image
#         run: docker push "$IMAGE_URI"

#       - name: Terraform init/validate/plan/apply
#         working-directory: ${{ env.TF_WORKING_DIR }}
#         env:
#           TF_VAR_image: ${{ env.IMAGE_URI }}
#         run: |
#           # Inject project into terraform via provider default or tfvars
#           PROJECT_ID="$(gcloud config get-value project)"
#           echo "project_id = \"${PROJECT_ID}\"" > auto.tfvars
#           echo "region     = \"${{ env.REGION }}\"" >> auto.tfvars
#           echo "repo_id    = \"${{ env.REPO_ID }}\"" >> auto.tfvars
#           echo "service_name = \"${{ env.SERVICE_NAME }}\"" >> auto.tfvars

#           terraform init -input=false
#           terraform validate
#           terraform plan -input=false -out=tfplan
#           terraform apply -input=false -auto-approve tfplan