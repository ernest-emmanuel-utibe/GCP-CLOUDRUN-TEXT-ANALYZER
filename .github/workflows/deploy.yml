name: Build and Deploy Text Analyzer

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: us-central1
  SERVICE: text-analyzer
  REGION: us-central1

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r app/requirements.txt
        pip install flake8 pytest pytest-asyncio httpx

    - name: Lint Python code
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Treat all errors as warnings with max line length of 88
        flake8 app/ --count --max-complexity=10 --max-line-length=88 --statistics

    - name: Run tests
      run: |
        cd app
        python -m pytest ../tests/ -v

    - name: Test Docker build
      run: |
        cd app
        docker build -t test-image .

  terraform-validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Terraform Format
      run: terraform fmt -check terraform/

    - name: Terraform Init
      run: |
        cd terraform
        terraform init -backend=false

    - name: Terraform Validate
      run: |
        cd terraform
        terraform validate

  build-and-push:
    name: Build and Push Container
    runs-on: ubuntu-latest
    needs: [lint-and-test, terraform-validate]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Google Auth
      id: auth
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Set up Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v2'

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan -var="project_id=$PROJECT_ID" -var="image_tag=$GITHUB_SHA" -out=tfplan

    - name: Terraform Apply
      run: |
        cd terraform
        terraform apply -auto-approve tfplan

    - name: Get Cloud Run URL
      id: deploy
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE --region=$REGION --format='value(status.url)')
        echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT

    - name: Test deployment
      run: |
        # Wait for service to be ready
        sleep 30
        
        # Test health endpoint (if accessible)
        # Note: This will fail if service is truly private, but that's expected
        echo "Deployment completed successfully"
        echo "Service URL: ${{ steps.deploy.outputs.service_url }}"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Google Auth
      id: auth
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Set up Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v2'

    - name: Scan container image
      run: |
        gcloud artifacts docker images scan \
          $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/text-analyzer-repo/text-analyzer:$GITHUB_SHA \
          --location=$GAR_LOCATION \
          --format="table(package,version,severity,fixed_version)"}'

    - name: Set up Cloud SDK
      uses: 'google-github-actions/setup-gcloud@v2'

    - name: Configure Docker to use gcloud as a credential helper
      run: |
        gcloud auth configure-docker $GAR_LOCATION-docker.pkg.dev

    - name: Build Docker image
      run: |
        cd app
        docker build -t $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/text-analyzer-repo/text-analyzer:$GITHUB_SHA .

    - name: Push Docker image
      run: |
        docker push $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/text-analyzer-repo/text-analyzer:$GITHUB_SHA

    - name: Tag as latest
      run: |
        docker tag $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/text-analyzer-repo/text-analyzer:$GITHUB_SHA \
                $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/text-analyzer-repo/text-analyzer:latest
        docker push $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/text-analyzer-repo/text-analyzer:latest

  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Google Auth
      id: auth
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }





















# name: build-and-deploy

# on:
#   push:
#     branches: [ "master" ]

# jobs:
#   build-deploy:
#     runs-on: ubuntu-latest

#     permissions:
#       id-token: write
#       contents: read

#     env:
#       REGION: europe-west1
#       REPO_ID: text-analyzer
#       SERVICE_NAME: text-analyzer-api
#       TF_WORKING_DIR: terraform

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: Set up gcloud auth (WIF)
#         uses: google-github-actions/auth@v2
#         with:
#           workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
#           service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

#       - name: Set up gcloud SDK
#         uses: google-github-actions/setup-gcloud@v2
#         with:
#           version: ">= 472.0.0"

#       - name: Configure Artifact Registry Docker auth
#         run: gcloud auth configure-docker $REGION-docker.pkg.dev --quiet

#       - name: Build image
#         run: |
#           PROJECT_ID="$(gcloud config get-value project)"
#           IMAGE_URI="${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO_ID}/text-analyzer:${GITHUB_SHA}"
#           echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
#           docker build -t "$IMAGE_URI" .

#       - name: Push image
#         run: docker push "$IMAGE_URI"

#       - name: Terraform init/validate/plan/apply
#         working-directory: ${{ env.TF_WORKING_DIR }}
#         env:
#           TF_VAR_image: ${{ env.IMAGE_URI }}
#         run: |
#           # Inject project into terraform via provider default or tfvars
#           PROJECT_ID="$(gcloud config get-value project)"
#           echo "project_id = \"${PROJECT_ID}\"" > auto.tfvars
#           echo "region     = \"${{ env.REGION }}\"" >> auto.tfvars
#           echo "repo_id    = \"${{ env.REPO_ID }}\"" >> auto.tfvars
#           echo "service_name = \"${{ env.SERVICE_NAME }}\"" >> auto.tfvars

#           terraform init -input=false
#           terraform validate
#           terraform plan -input=false -out=tfplan
#           terraform apply -input=false -auto-approve tfplan
